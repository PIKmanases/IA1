import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import r2_score, mean_squared_error
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures

# DEFINICION DE ARRAY DE DATOS
datax = np.asarray([
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
    31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
    60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,
    89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
    100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
    123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145,
    146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
    169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
    192, 193, 194, 195, 196, 197, 198, 199,
    200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222,
    223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
    246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
    269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
    292, 293, 294, 295, 296, 297, 298, 299,
    300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
    323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345,
    346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368,
    369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391,
    392, 393, 394, 395, 396, 397, 398, 399,
    400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422,
    423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445,
    446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468,
    469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491,
    492, 493, 494, 495, 496, 497, 498, 499,
    500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522,
    523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545,
    546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
    569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591,
    592, 593, 594, 595, 596, 597, 598, 599,
    600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622,
    623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645,
    646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668,
    669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685
])[:, np.newaxis]
datay = np.asarray([
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 1, 3, 4, 5, 1, 3,
    0, 3, 4, 0, 6, 3, 3, 3, 6, 2, 6, 9, 2, 10, 5, 7, 40, 10, 6, 19, 9, 4, 8, 74, 19, 7, 3, 18, 13, 66, 41, 43, 12, 67,
    17, 26, 21, 34, 31, 34, 6, 10, 38, 20, 42, 57, 28, 143, 49, 64, 79, 139, 175, 158, 106, 88, 155, 246, 211, 299, 426,
    269, 339, 302, 259, 306, 269, 211, 299, 198, 280, 179, 265, 411, 397, 286, 318, 343, 364, 431, 218, 414, 96, 303,
    555, 718, 551, 814, 486, 256, 418, 780, 778, 351, 1037, 671, 572, 466, 734,
    984, 1138, 1299, 1330, 790, 700, 901, 674, 1236, 1003, 1008, 806, 408, 1220, 1261, 939, 1021, 1191, 666, 340, 1296,
    1131, 1073, 1019, 1272, 638, 261, 1209, 1179, 1271, 1000, 1163, 358, 227, 788, 1143, 824, 943, 903, 420, 389, 996,
    1151, 1233, 1144, 903, 337, 310, 909, 1043, 1124, 1052, 943, 331, 342, 1152, 1082, 1141, 1065, 749, 227, 166, 813,
    724, 681, 670, 441, 189, 146, 821, 893, 680, 694, 625, 253, 256, 455, 243, 731, 724, 742, 289, 222, 896, 752, 449,
    872, 796, 395, 162, 697, 790, 684,
    660, 618, 212, 209, 678, 793, 730, 426, 583, 167, 106, 521, 708, 653, 634, 571, 353, 233, 594, 157, 771, 729, 701,
    156, 104, 665, 702, 552, 553, 619, 162, 38, 237, 634, 653, 634, 530, 215, 82, 765, 662, 704, 564, 549, 160, 126,
    688, 600, 639, 692, 635, 191, 86, 589, 600, 664, 410, 642, 161, 91, 715, 708, 602, 735, 547, 180, 125, 785, 671,
    661, 732, 562, 176, 122, 654, 722, 608, 628, 526, 168, 104, 750, 676, 633, 176, 82, 161, 116, 798, 812, 855, 207,
    101, 176, 204, 849, 819, 882, 992, 1053, 340, 203,
    1018, 993, 962, 1132, 1012, 308, 252, 1097, 1016, 994, 1224, 952, 345, 229, 1039, 1048, 1132, 756, 801, 394, 138,
    679, 668, 683, 668, 644, 226, 106, 776, 804, 818, 751, 831, 175, 131, 701, 769, 742, 683, 670, 242, 127, 833, 692,
    743, 670, 520, 190, 155, 752, 826, 643, 814, 647, 239, 216, 809, 815, 755, 871, 727, 223, 144, 946, 938, 901, 856,
    947, 303, 210, 987, 1100, 1041, 978, 938, 348, 190, 298, 490, 366, 280, 203, 215, 182, 1351, 1327, 1510, 1256, 1326,
    421, 231, 1997, 1793, 1549, 1962, 1604,
    407, 289, 1618, 1609, 1826, 1631, 1480, 368, 233, 1069, 1574, 1629, 1388, 778, 192, 173, 1200, 1187, 1147, 1261,
    1143, 194, 200, 948, 1376, 1091, 1367, 910, 207, 151, 1197, 1022, 1388, 891, 929, 329, 181, 1126, 1453, 989, 1566,
    854, 353, 192, 1425, 1289, 1406, 1325, 1363, 537, 307, 1560, 1810, 1757, 1798, 1778, 514, 273, 1708, 1507, 1691,
    1471, 1502, 492, 329, 1834, 2000, 1977, 2269, 1840, 743, 382, 710, 2820, 2862, 2492, 2287, 823, 520, 2775, 2984,
    3078, 2924, 3001, 1237, 618, 2995, 2869,
    2703, 2885, 2486, 712, 545, 3387, 3095, 3364, 3275, 3320, 1272, 496, 2639, 3575, 3336, 3394, 2956, 1142, 632, 2789,
    4399, 4068, 3998, 3998, 1004, 604, 3305, 4618, 4358, 4216, 4167, 1309, 757, 3823, 4650, 5826, 5243, 4580, 1334, 754,
    4917, 5175, 5113, 4754, 3736, 1306, 740, 4478, 5271, 3828, 4887, 2556, 1079, 640, 4032, 5120, 3150, 4800, 4014,
    1070, 733, 4299, 4229, 1107, 4068, 3428, 834, 604, 3718, 4243, 4037, 3771, 2808, 956, 773, 2956, 3955, 3071, 2942,
    2309, 684, 386, 2804, 2663,
    2610, 2105, 1991, 680, 285, 1724, 1703, 1412, 1705, 1369, 382, 193, 1724, 1474, 307, 1692, 1206, 343, 59, 1350,
    1351, 1274, 1377, 982, 170, 85, 136, 782, 1066, 945, 829, 249, 85, 994, 754, 810, 829, 593, 275, 30, 557, 783, 813,
    827, 699, 179, 58, 960, 815, 829, 483, 458, 115, 11, 363, 452, 291, 313, 502, 310, 39, 544, 418, 475, 516, 324, 61,
    8, 288, 341, 329, 254, 213, 69, 64, 376, 373, 322, 163, 98, 39, 91, 597, 821, 887
])[:, np.newaxis]

plt.scatter(datax, datay)

p_features = PolynomialFeatures(degree=3)
x_transf = p_features.fit_transform(datax)

model = LinearRegression().fit(x_transf, datay)
y = model.predict(x_transf)

rmse = np.sqrt(mean_squared_error(datay, y))
r2 = r2_score(datay, y)

x = np.linspace(0, 707, 707)
x = x[:, np.newaxis]

x_transform = p_features.fit_transform(x)
y = model.predict(x_transform)
title = 'RMSE = {}; R2 = {} ; D = {}'.format(round(rmse,2), round(r2,2), 8)

plt.plot(x, y, color='Yellow', linewidth=3)
plt.grid()
plt.ylim(0, 6000)
plt.xlim(0, 710)
plt.title("Prediccion de infeccion de COVID-19 en Guatemala 01/2022\n " + title, fontsize=10)
plt.ylabel('Infectados')
plt.xlabel('Dias')
plt.show()